1. Que es Python

Python es un lenguaje de programación de alto nivel, interpretado, de propósito general y de código abierto, 
creado por Guido van Rossum en 1991. Se caracteriza por su sintaxis legible y fácil de aprender, que 
facilita la creación de programas y la resolución de problemas. 


2. Que significa que sea interpretado

Significa que cada codigo python se ejecutan en tiempo real y se revisan en tiempo de ejecucion cada linea de codigo.


3. Que significa que tenga tipado dinamico

Significa que los datos se pueden usar sin ser especificados anteriormente.


4. Que significa que sea multiplataforma

Que todo programa hecho en Python se puede ejecutar en sistemas Windows, Mac o Linux.


5. Que significa que sea multiparadigma

Que todo programa con Python se puede hacer con enfoques de la programacion diferentes, POO, POE, etc.


6. Que es un programa

Es un conjunto de instrucciones entendibles y ejecutables por un computador que logra un objetivo determinado.


7. Que es un codigo fuente

Es el programa que nosotros, como programadores, escribimos.


8. Que es un archivo ejecutable

Es un archivo que contiene instrucciones para que una computadora ejecute un programa. Al hacer doble clic en un archivo ejecutable, 
el sistema operativo lo interpreta y ejecuta las instrucciones que contiene. Los archivos ejecutables suelen tener extensiones 
como .exe en Windows, pero existen muchos otros formatos. 


9. Que es interprete

Es un programa que va evaluando otro programa en la medida en que va ejecutando linea por linea.


10. Que es un compilador

Es un programa que revisa a otro programa para ver si este ultimo quedo bien escrito segun las reglas sintacticas de un
lenguaje de programacion.


11. Que es una variable

Es un espacio de memoria donde se puede guardar un dato. Se identifican con un nombre especifico. No deben tener espacios en blanco, 
no numeros como primera palabra ni caracteres especiales al principio. 


12. Python diferencia entre mayusculas y minusculas. Sabe que es var1 y Var1 son diferentes. Se le llama 'Case Sensitive'.


13. Los Operadores Aritmeticos

Suma: +
Resta: -
Division: /
Division entera: // --> Obtiene el cociente de una division entre dos valores
Modulo: % --> Obtiene el residuo de una division entre dos valores
Potenciacion: ** --> Obtiene el resultado de elevar un numero a una potencia


14. Tipos de Datos

Tipo            Identificador       Descripcion                             Ejemplo

Entero          int                 Numero sin punto decimal                21  
Entero largo    int                 Numero sin punto decimal largo          789552512204
Reales          float               Numero con punto decimal                117.89
Complejos       complex             Numero con parte real e imaginaria      17 + 78j
Cadenas         str                 Conjunto de caracteres                  "Vladimir"
Booleanos       bool                Verdadero o falso                       True, False


15. 'INPUT' permite el ingreso de entrada de datos por el usuario.


16. Los operadores Logicos:

Operador        Descripcion

and             Genera Verdadero en caso de que las dos condiciones que conecta sean Verdaderas.
or              Genera Verdaderi si al menos UNA DE LAS CONDICIONES que conecta sea Verdadera.
not             Invierte el sentido logico de la expresion, si es Verdadera lo devuelve Falso, y si es Falso es Verdadero.


17. Algoritmos

Son una secuencia de instrucciones secuenciales y ordenados que permiten lograr un objetivo. 


18. Partes de un Algoritmos

Input: Es el ingreso de los datos que el algoritmo necesita operar
Proceso: Se trata de la operacion logica formal que el algoritmo emprendera con lo recibido del Input
Salida/Output: Los resultados obtenidos del proceso sobre el Input, una vez terminada la ejecucion del algoritmo


19. Tipos de Algoritmos

Existen 4 tipos de algoritmos en informatica:

    1. Algoritmo Computacional: Cuya resolución depende del calculo, y que puede ser desarrollado por una computadora sin dificultades.

    2. Algoritmo No Computacional: Aquellos que no requieren de los procesos de un computador para resolverse, o cuyos pasos son exclusivos para humanos.

    3. Algoritmo Cualitativo: Se trata de un algoritmo en cuya resolucion no intervienen calculos numericos, sino secuencias logicas y formales.

    4. Algoritmo Cuantitativo: Es un algoritmo que depende de calculos matematicos para dar con su resolucion.


20. Pseudo Codigo

Es una descripcion de alto nivel (lenguaje humano) de un algoritmo que emplea una mezcla de lenguaje natural con algunas convenciones de lenguajes de
programacion, como asignaciones, ciclos y condicionales, aunque no esta regido por ningun estandar. 


21. Fases del Pseudo Codigo

    1. Fase Inicio
    2. Declaracion de variables o constantes
    3. Inicializacion de variables o constantes
    4. Entradas
    5. Calculos
    6. Salidas
    7. Fin


22. Diagramas de Flujo o Flujogramas

Son descripciones graficas de los algoritmos. Usan simbolos conectados con flechas para indicar la secuencia de instrucciones. Son usados para 
representar algoritmos pequeños, ya que abarcan mucho espacio y su construccion es laboriosa. Por su facilidad de lectura son usados como
introduccion a los algoritmos, descripcion de un lenguaje y descripcion de procesos a personas ajenas a la computacion.


23. Sentencias repetitivas

Es una instruccion que permite que un conjunto de instrucciones se repita una cantidad de veces determinada. Existen dos sentencias 'for' y 'while'.


24. Funciones

Es un conjunto breve de instrucciones que permiten alcanzar facilmente un pequeño objetivo. Las funciones son la base para resolver los tres grandes problemas
de la programacion:

    a) La reutilizacion del codigo
    b) La simplificacion del objetivo 
    c) La facilidad para realizar las pruebas en frio.

Con las funciones se hace efectiva la estrategia 'Divide y Venceras' que es una manera de hacer que los programas, por complejos que parezcan, sean mas faciles de
entender y, sobre todo, mas faciles de corregir.


25. Tipo de Dato: Byte

Es una secuencia inmutable de bytes, cada uno representado por un entero entre 0 y 255. Representan los datos binarios, usados en redes, archivos o cuando
se necesita trabajar con Datos no Textuales.

    Ejemplo:

                bytes([0, 200, 50, 25, 10, 255])


26. Tipo de Dato: Nulo

Representa la ausencia de un valor y es un objeto de tipo NoneType. No es lo mismo que 0, una cadena vacía, o False, ya que None es un tipo de dato único que no 
representa ningún valor específico.

    Ejemplo 1:

            variable_nula = None
            print(variable_nula)  # Output: None

    Ejemplo 2:
            
            def funcion_sin_retorno():
            pass  # Si no hay un return explícito, la función retorna None

            resultado = funcion_sin_retorno()
            print(resultado)  # Output: None

    Ejemplo 3:

            valor = None
            if valor is None:
                print("La variable es None")
            else:
                print("La variable no es None")


27. Tipo de Dato: Conjunto Inmutable

Es aquel que no puede ser modificado una vez creado. Una vez que se defina un objeto inmutable con un valor especifico, ese valor no puede cambiar. Si se intenta modificar
un objeto inmutable, en realiadad se crea un nuevo objeto con el valor modificado en vez de alterar el original.

    Ejemplo 1:

            numero = 10
            numero = numero + 5  # Se crea un nuevo objeto número con valor 15
            print(numero)  # Salida: 15

            cadena = "Hola"
            # cadena[0] = "C"  # Esto generaría un error, ya que no se puede modificar directamente una cadena
            nueva_cadena = "C" + cadena[1:] # Se crea una nueva cadena
            print(nueva_cadena) # Salida: Cola

            tupla = (1, 2, 3)
            # tupla[0] = 4 # Esto generaría un error, ya que no se puede modificar una tupla
            f_set = frozenset({1, 2, 3})
            # f_set.add(4) # Esto generaría un error, ya que no se puede modificar un frozenset


28. Tipo de Dato: Bytearray

Es un objeto mutable que contiene una secuencia de bytes. A diferencia de ellos, que son inmutables, Bytearray permite modificar sus elementos. Se usa para trabajar con datos binarios donde 
se necesita modificar la secuencia de bytes. 

    Ejemplo 1: Modificacion de elementos

            data = bytearray(b"hello")
            data[0] = 72  # Modifica el primer byte (72 es la representación ASCII de 'H')
            print(data)  # Output: bytearray(b'Hello')


    Ejemplo 2: Anexion de datos

            data = bytearray(b"hello")
            data.extend(b" world")
            print(data)  # Output: bytearray(b'hello world')


29. Tipo de Dato: Memory view

Permite acceder y manipular los datos internos de un objeto sin crear copias, lo que es util para grandes conjuntos de datos. Permite operar sobre la memoria subyacente de un objeto
como una cadena o un array, sin la sobrecarga de duplicar los datos.

    Ejemplo 1: Acceso a datos sin copia:
    
            texto = "Hola Mundo"
            vista = memoryview(texto.encode('utf-8'))  # Codificar a bytes para usar memoryview
            primer_byte = vista[0]
            print(primer_byte)  # Imprime 72 (código ASCII de 'H')

    Ejemplo 2:

           import array
           numeros = array.array('i', [1, 2, 3, 4, 5])
           vista_numeros = memoryview(numeros)
           vista_numeros[0] = 10  # Modifica el primer elemento del array
           print(numeros)  # Imprime array('i', [10, 2, 3, 4, 5])